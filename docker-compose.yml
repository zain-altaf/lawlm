# Services: qdrant (vector DB), lawlm-pipeline (ingestion), lawlm-query (testing RAG/LLM)

services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334" # gRPC port
    volumes:
      - ./qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - lawlm-network

  lawlm-pipeline:
    build: .
    container_name: lawlm-pipeline
    depends_on:
      qdrant:
        condition: service_healthy
    environment:
      - QDRANT_URL=http://qdrant:6333
    env_file:
      - .env # optional â€” create this locally or remove if not needed
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env:ro
    command: ["--court", "scotus", "--num-dockets", "5"]
    networks:
      - lawlm-network

  lawlm-query:
    build: .
    container_name: lawlm-query
    depends_on:
      qdrant:
        condition: service_healthy
    environment:
      - QDRANT_URL=http://qdrant:6333
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env:ro
    entrypoint: ["python", "legal_rag_query.py"]
    command: ["What are the requirements for due process?"]
    profiles:
      - query
    networks:
      - lawlm-network

networks:
  lawlm-network:
    driver: bridge

volumes:
  qdrant_storage:
